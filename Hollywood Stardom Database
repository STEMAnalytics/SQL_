/*Welcome to vault of Hollywood Stardom Database.  In this database, there are 3 tables: celebrities, vocalists, and writers.*/   

/* Create a table about celebrities starring in movies.  Columns include the movie celebrity name, the title of movies they played a role in, and the 
id of another celebrity if married to said celebrity. */
CREATE TABLE celebrities (
id INTEGER PRIMARY KEY AUTOINCREMENT,
full_name TEXT,
movie TEXT,
starred_spouse TEXT);


INSERT INTO celebrities (full_name, movie, starred_spouse) VALUES ("Dolly Parton", "Nine to Five", NULL);

INSERT INTO celebrities (full_name, movie, starred_spouse) VALUES ("Faith Hill" , "1883", "Tim McGraw");

INSERT INTO celebrities (full_name, movie, starred_spouse) VALUES ("Tim McGraw", "1883", "Faith Hill");

INSERT INTO celebrities (full_name, movie, starred_spouse) VALUES ("Kristen Stewart", "Twilight", "Robert Pattinson");

INSERT INTO celebrities (full_name, movie, starred_spouse) VALUES ("Robert Pattinson", "The Twilight Saga", "Kristen Stewart");

INSERT INTO celebrities (full_name, movie, starred_spouse) VALUES ("Tim McGraw", "The Shack", NULL);

INSERT INTO celebrities (full_name, movie, starred_spouse) VALUES ("Taylor Lautner", "Twilight", NULL); 



/*Display all data in this table called Celebrities.*/

SELECT*FROM celebrities;

/*Create second table called Vocalists with the writer's id, written song, place of birth, genre, and fan response to the release of the song (this last column consist of estimated numbers, not accurate, but an integer based on overall Vocalist stardom.*/

CREATE TABLE vocalists (id INTEGER PRIMARY KEY AUTOINCREMENT,
vocalist_id INTEGER,
song TEXT,
release_date INTEGER,
birthplace TEXT,
genre TEXT,
fan_response INTEGER);

/*Input data into columns of the vocalists table.*/


INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (1, "Nine to Five", 1980, "Tennessee", "Country_Bluegrass", 38000000);

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (1, "I Will Always Love You", 1974, "Tennessee", "Country_Bluegrass", 14000000);

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (1, "Jolene", 1974, "Tennessee", "Country_Bluegrass", 50000000);

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (2, "Breathe", 1999, "Mississippi", "Worship", 2000000);

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (2, "This Kiss", 1998, "Mississippi", "Country", 15000000);

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (3, "It's Your Love", 1987, "Louisiana", "Country", 20000000);

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (3, "Don't Take the Girl", 1994, "Louisiana", "Country", 500000);

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (3, "Shotgun Rider", 2014, "Louisiana", "Country", 400500);

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (3, "I Like It, I Love It",1995, "Louisiana", "Country", 750000);


/*Display table called vocalists with inputted data in columns.*/
SELECT*FROM vocalists;

/*Use a JOIN to create another Table that shows if the celebrity is also an artist/vocalist by checking if Celebrities in Table 1 are also a writer of a song/Vocalists within Table 2 .*/
SELECT c.full_name AS celebrity_and_vocalist, v.song
    FROM celebrities c
    JOIN vocalists v
    ON c.id = v.vocalist_id;


/*The Grand Ole Opry wants to choose from its historic icons throughout the years that was also in the movies. Create a JOIN that displays each vocalist's information, their published songs, using GROUP by fan_response.*/    

SELECT c.full_name AS GOOpry_candidate, 
v.song, v.genre, v.birthplace
FROM celebrities c
JOIN vocalists v
ON c.id = v.vocalist_id
GROUP by GOOpry_candidate
HAVING fan_response > 5000000 ;


/*Now the Grand Ole Opry has new parameters of the song published date.  They want to know the number of viewers of each song when released by the artist to analyze an acccurate representation of each celebrity's/vocalist's stardom. Write a command demonstrating such.*/
SELECT c.full_name AS GOOpry_finalist,
v.song, v.genre, v.fan_response
FROM celebrities c
JOIN vocalists v 
ON c.id = v.vocalist_id
WHERE v.genre = "Country" OR "Country_Bluegrass";


/*Create a third table titled Authors where the columns include the author, names of each book, and the release date of each book.*/

CREATE TABLE authors (
id INTEGER PRIMARY KEY AUTOINCREMENT,
author_id INTEGER,
celebrity_id INTEGER, 
booktitle TEXT,
published INTEGER);

INSERT INTO authors (author_id, booktitle, published) VALUES (1, "Coat of Many Colors", 1994);

INSERT INTO authors (author_id, booktitle, published) VALUES (3, "Grit and Grace", 2019);

INSERT INTO authors (author_id, booktitle, published) VALUES (3, "Humble & Kind", 2016);

SELECT c.full_name, a.booktitle, a.published 
FROM celebrities c
JOIN authors a
ON c.id = a.author_id
ORDER BY published ASC;

/*Create a table about the fictional characters in Twilight, with the three main actors are also in the Celebrities table, being Robert Pattinson and Kristen Stewart and Taylor Lautner .*/ 
CREATE TABLE spouse (
id INTEGER PRIMARY KEY AUTOINCREMENT,
character1_id INTEGER,
character2_id INTEGER);

/*Insert values into the spouse table from the Twilight book series.*/

INSERT INTO spouse (character1_id, character2_id) VALUES (2,3);

/*Using the celebrities T1 table and this recently added spouse Table T3, select a JOIN to show the names of the characters and also show if which of the three are married to another in reality and in the Twilight book (take into account the marriage in real life was after the Twilight series was published).*/
