/*Welcome to vault of Hollywood Stardom Database.  In this database, there are 3 tables: celebrities, vocalists, and writers.*/   

/* Create a table about celebrities.  Columns include the movie celebrity name, the title of movies they played a role in, and the 
id of another celebrity if married to said celebrity. */
CREATE TABLE celebrities (
id INTEGER PRIMARY KEY AUTOINCREMENT,
full_name TEXT,
movie TEXT,
spouse TEXT);


INSERT INTO celebrities (full_name, movie, spouse) VALUES ("Dolly Parton", "Nine to Five", NULL);

INSERT INTO celebrities (full_name, movie, spouse) VALUES ("Faith Hill" , "1883", "Tim McGraw");

INSERT INTO celebrities (full_name, movie, spouse) VALUES ("Tim McGraw", "1883", "Faith Hill");

INSERT INTO celebrities (full_name, movie, spouse) VALUES ("Kristen Stewart", "Twilight", "Robert Pattinson");

INSERT INTO celebrities (full_name, movie, spouse) VALUES ("Robert Pattinson", "The Twilight Saga", "Kristen Stewart");

INSERT INTO celebrities (full_name, movie, spouse) VALUES ("Tim McGraw", "The Shack", NULL);

/*Display all data in this table called Celebrities.*/

SELECT*FROM celebrities;

/*Create second table called Vocalists with the writer's id, written song, place of birth, and genre, and fan response to the release of the song (this last column consist of estimated numbers.*/

CREATE TABLE vocalists (id INTEGER PRIMARY KEY AUTOINCREMENT,
vocalist_id INTEGER,
song TEXT,
release_date TEXT,
birthplace TEXT,
genre TEXT,
fan_response INTEGER);

/*Input data into columns of the vocalists table.*/

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (1, "Jolene", "1973", "Tennessee", "Country_Bluegrass", "12000000");

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (1, "Nine to Five", "1980", "Tennessee", "Country_Bluegrass", "38000000");

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (2, "Breathe", "1999", "Mississippi", "Worship", "2000000");

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (2, "This Kiss", "1998", "Mississippi", "Country", "15000000");

INSERT INTO vocalists (vocalist_id, song, release_date, birthplace, genre, fan_response) 
VALUES (3, "It's Your Love", "1987", "Louisiana", "Country", "20000000");


/*Display table called vocalists with inputted data in columns.*/
SELECT*FROM vocalists;

/*Use a JOIN to create another Table that shows if the celebrity is also an artist by checking if Celebrities in Table 1 are also a writer of a song in Table 2.*/
SELECT c.full_name AS celebrity_and_vocalist, v.song
    FROM celebrities c
    JOIN vocalists v
    ON c.id = v.vocalist_id;





   
/*The Grand Ole Opry wants to choose from its historic icons throughout the years.  Create a JOIN that displays each vocalist's information and their published songs come from a Country/Bluegrass genre .*/    

SELECT c.full_name AS celebrity_candidate_GOOpry, v.song, v.genre, v.birthplace
FROM celebrities c
JOIN vocalists v
ON c.id = v.vocalist_id
WHERE v.genre = "Country_Bluegrass";


/*Now the Grand Ole Opry has new parameters of the song published date.  They want to know the number of viewers of each song when released by the artist as well as compare the oldest song releases to be the finalists.  Write a command demonstrating such.*/

SELECT c.full_name AS GOOPry_finalists, 
v.release_date 
v.fan_response 
v.song
FROM celebrities c
JOIN vocalists v
ON c.id = v.vocalist_id; 
