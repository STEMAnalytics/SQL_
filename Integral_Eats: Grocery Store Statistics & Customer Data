/*This grocery store database was created after completing the tutorial through Khan Academy, Lesson 1: SQL Basics tutorial.
The data of this project within this database is original by me.  This created grocery store database 
is for the store named Integral Eats. A demonstration of JOIN with another created table is used after 
a couple of queries specifically for Integral Eats.   */

/*Create a table with columns of id of each item, the item itself, the aisle location of each item, the customer_rating of each item, and the expiration date of each item. A key fact to not is using TEXT with the date parentheses returns the full date entered, not just the year.*/

CREATE TABLE Integral_Eats (id INTEGER PRIMARY KEY, 
item TEXT, 
aisle INTEGER, 
price REAL, 
customer_rating TEXT,
expiration_date TEXT);

/*Insert grocery store data into the table called Integral_Eats*/  

INSERT INTO Integral_Eats VALUES
 (1, "avocadoes",3,7,"good", "2023-06-05");
INSERT INTO Integral_Eats VALUES(2, "Hummus",1,12, "Excellent", "2024-05-23");
INSERT INTO Integral_Eats VALUES(3, "Peaches",3,2,"Good", "2023-06-12");
INSERT INTO Integral_Eats VALUES(4, "Pears",3,7,"Fair", "2023-07-21");
INSERT INTO Integral_Eats VALUES(5, "Granny Smith Apples",3,7,"Good", "2023-06-30");
INSERT INTO Integral_Eats VALUES(6, "Bran muffins",3,7,"Good", "2023-08-22");
INSERT INTO Integral_Eats VALUES(7, "Natureâ€™s Own Wheat Bread",10,1,"Good", "2023-12-23");
INSERT INTO Integral_Eats VALUES(8, "Gava",2,15,"Great","2026-03-01");
INSERT INTO Integral_Eats VALUES(9, "Miracle Whip",8,1,"Not great", "2028-12-15");
INSERT INTO Integral_Eats VALUES(10, "Milk",3,1,"Good", "2023-07-01");
INSERT INTO Integral_Eats VALUES(11, "Walnuts",6,11,"Great","2030-01-01");
INSERT INTO Integral_Eats VALUES(12, "Gouda Cheese",3,4,"Excellent", "2026-01-04");
INSERT INTO Integral_Eats VALUES(13, "LIFE Cereal",6,6,"Fair", "2025-01-08");
INSERT INTO Integral_Eats VALUES(14, "Bagels",5,2,"Great", "2024-08-02");
INSERT INTO Integral_Eats VALUES(15, "Cream Cheese", 1,5, "Delectable","2024-01-15");

/*List all items in store with the items, aisle, location, price listed, and customer review preference.*/ 

SELECT*FROM Integral_Eats;

/*Display the sum of the items per aisle.*/
SELECT aisle, SUM(aisle) FROM Integral_Eats GROUP BY aisle;

/*Display all of the items in the Integral Eats store database.*/
SELECT SUM(aisle) FROM Integral_Eats;

/*Order items that cost $2 or more dollars in ascending order.*/ 
SELECT*FROM Integral_Eats WHERE price >=2 ORDER BY price asc;

/*Create a column within the Integral_Eats Table that further analyzes the expiration dates with a new column in this table called "expiration_status" and distinguishes if the items are edible based off today's date of 2023-08-06 or tells the user to request a re-stock of that item.*/

SELECT item, expiration_date,
CASE 
    WHEN expiration_date > 20230806 THEN     "edible"
    ELSE "expired_request_restock"
    END AS "expiration_status"
    FROM Integral_Eats
    ORDER BY expiration_date asc; 
    
/*This command counts the items that need to be restocked given the date of 2023-08-06 from the above command.*/

SELECT COUNT (*) FROM Integral_Eats
    WHERE expiration_date < "2023-08-06"; 
    
    
/*Create another table called Customer_Informatics.  This table contains customer order data such as id (insinuated from autoincrement primary key), name, email address, phone number, sum of total orders, number of re-stock requests per customer, manager compliants per customer, customer order data, and the amount of stocks invested in Integral_Eats per customer.*/

CREATE TABLE Customer_Informatics (
id INTEGER PRIMARY KEY AUTOINCREMENT,
customer_id INTEGER,
customer_last_name TEXT,
customer_first_name TEXT,
customer_email TEXT,
customer_phone TEXT,
customer_orders INTEGER,
customer_order_item TEXT,
customer_compliants INTEGER,
customer_stock_investment REAL); 

INSERT INTO Customer_Informatics 
VALUES (1,5211, "Williams", "Samuel", "swilliams5267@gmail.com", "478-313-4211", 7, "avocadoes", 8, 0.02); 

SELECT*FROM Customer_Informatics;
