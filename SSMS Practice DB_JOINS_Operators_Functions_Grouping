/*Data was provided by course at Central Georgia Technical College, Intermediate SQL.*/

/*Test the tables created. */
SELECT*FROM Customer
/*There are 91 rows in the customer table.*/

/*Let us check that all of the other four tables
in the PracticeDB-InterSQL Database that we filled 
using the text files "TableScripts" and "RecordsScript".*/
SELECT*FROM OrderItem
/*There are 830 rows in the OrderItem table.*/

SELECT*FROM Product
/*There are 2155 rows in the Product table.*/
SELECT*FROM Supplier
/*There are 29 rows in the Product table.*/

/*Now some investigative questions! 
Why are there so many records in the CustomerOrder & OrderItem
tables?   These two tables connect to other tables.  The CustomerOrder
table has data from each order made by the Customer.  The OrderItem
table holds data regarding the item that the customer purchased per order.*/

/*Now, let us work on using JOINS to analyze these tables and their
relationships!*/

/*Alright,  a sales representative wants to know all of the customers that 
have ordered from this company!   Note, if a customer has ordered many times, 
that customer will be listed more than once.   Display customers that have ordered 
and join tables based off of the customer ID number (the PK's of each table) using a LEFT JOIN so that each
customer will be in the results. The result set pulls customers from Table 1/Customer with matching 
rows from Table 2/CustomerOrder.   If there is a customer that has not placed an order,
the result for that row will be "NULL" on Table 2.*/
SELECT * FROM
Customer
LEFT JOIN CustomerOrder
ON  Customer.CustId = CustomerOrder.CustomerId
/*We have 832 results from this query.*/

/*What happens when we use a RIGHT JOIN?  This query displays the customer
order from Table 2/CustomerOrder as well as displaying the customer whom ordered
from Table 1/Customer.  The difference between the RIGHT and LEFT JOIN indicates that
two people that are Customers have never placed an order at this company.  Get
that advertising team on the data to figure out if there is a marketing issue!  Let
us use a query that will display a list of customers that have never ordered by 
eliminating unused rows.*/
SELECT * FROM 
CustomerOrder
RIGHT JOIN Customer
ON CustomerOrder.CustomerId = Customer.CustId
/*There are no nulls in the result set of 832 rows from using a RIGHT JOIN. 
For this database, only customers can order if they are pre-established in the
database already as a customer.*/

SELECT * FROM 
Customer
LEFT JOIN CustomerOrder
ON Customer.CustId = CustomerOrder.CustomerId
WHERE CustomerOrder.CustomerId IS NULL

/*This query uses a LEFT JOIN with a WHERE filter clause from Table 2/CustomerOrder
so that only CustomerID numbers with NULL is found using the IS NULL operator.*/

/*Now, if there are nulls in both JOIN results/both tables?  Let us try an INNER JOIN!
The query below will find the matching rows from Table 1 and Table 2!*
Write a query that returns the rows that have matching rows in both tables. */
SELECT*FROM
Customer
INNER JOIN 
CustomerOrder
ON Customer.CustId = CustomerOrder.CustomerId

/*The result set from this query includes 830 rows.  This is not the same as a RIGHT JOIN 
because of the "business rule" that a customer cannot order without being in the database.
If this was not the case, it is possible that NULL rows would be displayed if orders from 
Table 2/CustomerOrder did not match a customer from Table 1/Customers.*/

/*Here is another business rule in this database:  A supplier row has to exist within the 
database in order to insert a product into the database.*/

/*Let us try JOINs with Table 5/Supplier and Table 4/Product!   This will be a large dataset. 
An even larger database would provide a tediously massive data result set.*/
SELECT*FROM 
Supplier
LEFT JOIN Product
ON  Supplier.SupplierId = Product.ProductID

SELECT*FROM 
Supplier
RIGHT JOIN Product
ON  Supplier.SupplierId = Product.ProductID

SELECT*FROM 
Supplier
FULL JOIN Product
ON  Supplier.SupplierId = Product.ProductID

/*Each join should have displayed the same results. Even though there are fewer results in the 
Supplier Table, these JOINs pulled rows with matches.  The Supplier rows has many listings in the result-set
since a supplier provides multiple products.  The business rule for this database is that no products exist
without a supplier match.*/

SELECT*FROM
Customer
LEFT JOIN 
CustomerOrder
ON Customer.CustId = CustomerOrder.CustomerId
WHERE
CustomerOrder.CustomerId IS NULL

SELECT*FROM
Customer
FULL JOIN 
CustomerOrder
ON Customer.CustId = CustomerOrder.CustomerId
WHERE
CustomerOrder.CustomerId IS NULL or Customer.CustId IS NULL

/*Same results!  Remember the business rule for this database!*/

SELECT * FROM 
Customer
LEFT JOIN CustomerOrder
ON Customer.CustId = CustomerOrder.CustomerId
ORDER BY Customer.CustId DESC

/*This orders the result-set by the CustomerId DESC from highest to lowest.
It just pulls rows and displays them based on the coder's command. */

SELECT
Customer.FirstName
, Customer.LastName
, Customer.CellPhone
,CustomerOrder.InvoiceNumber
, CustomerOrder.OrderDate
,CustomerOrder.TotalAmount
FROM Customer
LEFT JOIN 
CustomerOrder
ON Customer.CustId = CustomerOrder.CustomerId
ORDER BY Customer.CustId


/*Let us JOIN 3 tables!  */
SELECT*FROM Product
/*This table has 78 rows.*/
SELECT*FROM Supplier
/*This table has 29 rows.*/
SELECT*FROM OrderItem
/*This table has 2155 rows.*/

/*What happens when you connect the tables 
with the PKs to the FKs.  There has to be several
items from the Product table also on one order.  
The same product can also be ordered on many orders.*/

/*Let us have a more organized result-set!*/
SELECT
OrderItem.ProductId, Product.ProductName, OrderItem.UnitPrice,OrderItem.Quantity,Product.Package
FROM OrderItem
LEFT JOIN Product
ON OrderItem.ProductId = Product.ProductId
ORDER BY
OrderItem.ProductId

/*When adding a third table, remember the following items:
1. Don't be too concerned about NULLs as INNER JOIN negates or JOIN/auto-defaults 
to INNER JOIN.
2. When joining a 3rd table, the ON statemnt has to be listed in the same sequence as 
you join the tables. Each table must connect to another with the FK to the PK.

The tablenames are required for each column so that the database can recognize which table
it is being pulled from.   Remember, using only one tablename does not require a "tablename."
before the column name.*/

SELECT
OrderItem.ProductId, Product.ProductName, OrderItem.UnitPrice,OrderItem.Quantity,Product.Package, Supplier.CompanyName,Supplier.Country
FROM OrderItem
JOIN Product
ON OrderItem.ProductId = Product.ProductId
JOIN Supplier
ON Product.SupplierId = Supplier.SupplierId
ORDER BY Supplier.Country DESC, Supplier.CompanyName
/*Now the result-set is pulled and displayed by the column of the name of the company, from z.*/

SELECT
OrderItem.ProductId, Product.ProductName, OrderItem.UnitPrice,OrderItem.Quantity,Product.Package, Supplier.CompanyName,Supplier.Country
FROM OrderItem
JOIN Product
ON OrderItem.ProductId = Product.ProductId
JOIN Supplier
ON Product.SupplierId = Supplier.SupplierId
ORDER BY Supplier.Country DESC, Product.ProductName
/*Now the result-set is pulled and displayed by the column of ProductName, from z.*/


/*Now, let us JOIN four tables!*/

SELECT 
Customer.FirstName
, Customer.LastName
, Customer.Country
,CustomerOrder.TotalAmount
, Product.ProductName
,OrderItem.UnitPrice
, OrderItem.Quantity
, Product.Package
,Supplier.CompanyName
, Supplier.Country
FROM Customer
JOIN CustomerOrder
ON Customer.CustId = CustomerOrder.CustomerId
JOIN OrderItem
ON CustomerOrder.OrderId = OrderItem.OrderId
JOIN Product
ON OrderItem.ProductId = Product.ProductId
JOIN Supplier
ON Supplier.SupplierId = Product.SupplierId
ORDER BY Customer.LastName, Customer.FirstName, Customer.Country,Supplier.CompanyName, Supplier.Country

/*Customers with their respective orders along with the products within each order are sorted by the
customer's lastname.  The order of column name is very important as it organizes which column is listed first
down to last. The JOIN order is extremely important so that the correct FKs are connected to the correct PKs.The 
order of the JOIN is not important, but the relationships between the tables and connecting them with the correct
relationship is.  The correct FK hsa to connect with the correct PK. SQL Server has a query optimizer that calculates what 
will give the quickest results.  */

/*Let us use aliases to clean up this query some!*/
SELECT
C.FirstName, C.LastName, C.Country,O.TotalAmount, P.ProductName,I.UnitPrice, I.Quantity, P.Package,S.CompanyName, S.Country
FROM Customer AS C
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
JOIN OrderItem AS I
ON O.OrderId = I.OrderId 
JOIN Product AS P
ON I.ProductId = P.ProductId
JOIN Supplier AS S
ON S.SupplierId = P.SupplierId
ORDER BY C.LastName, C.FirstName, C.Country,S.CompanyName, S.Country

/*Write a query that displays the Customers and the purchased items of each one.  Which columns should be displayed 
and how should the result-set be organized?*/
SELECT 
c.FirstName
,c.LastName
,c.Country
,p.ProductName
,o.OrderID,p.ProductID
FROM Customer as c
JOIN CustomerOrder AS o
ON c.CustID = o.CustomerId
JOIN OrderItem AS i
ON o.OrderID = i.OrderId
JOIN Product AS p
ON i.ProductId = p.ProductId
ORDER BY c.LastName, c.Country

/*The marketing team wants to see the products ordered sorted by countries.*/
SELECT
C.FirstName, C.LastName, S.Country
FROM Customer AS C
JOIN CustomerOrder AS O
ON c.CustId = O.CustomerId
JOIN OrderItem AS I
on O.OrderId = I.OrderId
JOIN Product AS P
ON I.ProductId = P.ProductId
JOIN
Supplier AS S
ON P.SupplierId = S.SupplierId
ORDER BY C.LastName, S.Country

/*Let us JOIN 3 tables!  */
SELECT*FROM Product
/*This table has 78 rows.*/
SELECT*FROM Supplier
/*This table has 29 rows.*/
SELECT*FROM OrderItem
/*This table has 2155 rows.*/

/*What happens when you connect the tables 
with the PKs to the FKs.  There has to be several
items from the Product table also on one order.  
The same product can also be ordered on many orders.*/

/*Let us have a more organized result-set!*/
SELECT
OrderItem.ProductId, Product.ProductName, OrderItem.UnitPrice,OrderItem.Quantity,Product.Package
FROM OrderItem
LEFT JOIN Product
ON OrderItem.ProductId = Product.ProductId
ORDER BY
OrderItem.ProductId

/*When adding a third table, remember the following items:
1. Don't be too concerned about NULLs as INNER JOIN negates or JOIN/auto-defaults 
to INNER JOIN.
2. When joining a 3rd table, the ON statemnt has to be listed in the same sequence as 
you join the tables. Each table must connect to another with the FK to the PK.

The tablenames are required for each column so that the database can recognize which table
it is being pulled from.   Remember, using only one tablename does not require a "tablename."
before the column name.*/

SELECT
OrderItem.ProductId, Product.ProductName, OrderItem.UnitPrice,OrderItem.Quantity,Product.Package, Supplier.CompanyName,Supplier.Country
FROM OrderItem
JOIN Product
ON OrderItem.ProductId = Product.ProductId
JOIN Supplier
ON Product.SupplierId = Supplier.SupplierId
ORDER BY Supplier.Country DESC, Supplier.CompanyName
/*Now the result-set is pulled and displayed by the column of the name of the company, from z.*/

SELECT
OrderItem.ProductId, Product.ProductName, OrderItem.UnitPrice,OrderItem.Quantity,Product.Package, Supplier.CompanyName,Supplier.Country
FROM OrderItem
JOIN Product
ON OrderItem.ProductId = Product.ProductId
JOIN Supplier
ON Product.SupplierId = Supplier.SupplierId
ORDER BY Supplier.Country DESC, Product.ProductName
/*Now the result-set is pulled and displayed by the column of ProductName, from z.*/


/*Now, let us JOIN four tables!*/

SELECT 
Customer.FirstName
, Customer.LastName
, Customer.Country
,CustomerOrder.TotalAmount
, Product.ProductName
,OrderItem.UnitPrice
, OrderItem.Quantity
, Product.Package
,Supplier.CompanyName
, Supplier.Country
FROM Customer
JOIN CustomerOrder
ON Customer.CustId = CustomerOrder.CustomerId
JOIN OrderItem
ON CustomerOrder.OrderId = OrderItem.OrderId
JOIN Product
ON OrderItem.ProductId = Product.ProductId
JOIN Supplier
ON Supplier.SupplierId = Product.SupplierId
ORDER BY Customer.LastName, Customer.FirstName, Customer.Country,Supplier.CompanyName, Supplier.Country

/*Customers with their respective orders along with the products within each order are sorted by the
customer's lastname.  The order of column name is very important as it organizes which column is listed first
down to last. The JOIN order is extremely important so that the correct FKs are connected to the correct PKs.The 
order of the JOIN is not important, but the relationships between the tables and connecting them with the correct
relationship is.  The correct FK hsa to connect with the correct PK. SQL Server has a query optimizer that calculates what 
will give the quickest results.  */

/*Let us use aliases to clean up this query some!*/
SELECT
C.FirstName, C.LastName, C.Country,O.TotalAmount, P.ProductName,I.UnitPrice, I.Quantity, P.Package,S.CompanyName, S.Country
FROM Customer AS C
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
JOIN OrderItem AS I
ON O.OrderId = I.OrderId 
JOIN Product AS P
ON I.ProductId = P.ProductId
JOIN Supplier AS S
ON S.SupplierId = P.SupplierId
ORDER BY C.LastName, C.FirstName, C.Country,S.CompanyName, S.Country

/*Write a query that displays the Customers and the purchased items of each one.  Which columns should be displayed 
and how should the result-set be organized?*/
SELECT 
c.FirstName
,c.LastName
,c.Country
,p.ProductName
,o.OrderID,p.ProductID
FROM Customer as c
JOIN CustomerOrder AS o
ON c.CustID = o.CustomerId
JOIN OrderItem AS i
ON o.OrderID = i.OrderId
JOIN Product AS p
ON i.ProductId = p.ProductId
ORDER BY c.LastName, c.Country

/*The marketing team eants to see the products ordered sorted by countries.*/
SELECT
C.FirstName, C.LastName, S.Country
FROM Customer AS C
JOIN CustomerOrder AS O
ON c.CustId = O.CustomerId
JOIN OrderItem AS I
on O.OrderId = I.OrderId
JOIN Product AS P
ON I.ProductId = P.ProductId
JOIN
Supplier AS S
ON P.SupplierId = S.SupplierId
ORDER BY C.LastName, S.Country

/*Let us filter this data!  Use the AND Boolean operator in order to find out which
customers with the last name of 'Brown' also spent a total of over $500 for the Sales
Manager.*/

SELECT*FROM Customer AS C
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
	WHERE C.LastName ='Brown'
	OR O.TotalAmount > 500
/*These may not be the same Mr. Brown! Remember that the apostrophes around Brown 
declare it as a nvarchar since it is defined as toher text data types. */

SELECT*FROM Customer AS C
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
	WHERE C.LastName ='Brown'
	OR O.TotalAmount > 500

/*The display set will render orders with a customer with 
either the last name is Brown or $500 
in total of purchase.  This result-set is large of 612.*/

/*Let us use the NOT operator.*/
SELECT*FROM Customer AS C
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
	WHERE 
	NOT c.LastName = 'Brown'
	AND NOT o.TotalAmount > 500
/*Both conditions must be true in order to be displayed in the result-set.  */

/*IN & BETWEEN Operators. IN operators are used when multiple values are being checked
if they are true.*/
SELECT*FROM Customer AS C
JOIN CustomerOrder AS O
	ON	
	C.CustId = O.CustomerId
	WHERE C.LastName 
		IN (
		'Brown'
		, 'Wilson'
		,'Bennett'
			)
		AND O.TotalAmount > 500
/*The IN operator query renders 27 rows.*/

/*Now, the BETWEEN operator!*/
SELECT*FROM Customer AS C
JOIN CustomerOrder AS O
	ON C.CustId = O.CustomerId
	WHERE O.TotalAmount 
		BETWEEN 100
			AND 500
/*The result-set gives 182 rows.  There are two conditions for this BETWEEN operator.*/

/*LIKE operator with Wildcards.*/
SELECT*FROM Customer AS C
JOIN CustomerOrder AS O
	ON C.CustId = O.CustomerId
	WHERE C.LastName 
		LIKE 'Berg%'
		AND O.TotalAmount > 500

/*The percentage and underscore operator is a frequently used operator. There are not many names 
that include characters 'Berg', so a wildcard is highly recommended. Norway cell phone number 
sequence is interesting! Check it out!  */

/*Use an LIKE operator with a percent sign within a SQL query. Use the percentage sign!*/
SELECT*FROM Product
AS p
WHERE
	p.ProductName 
		LIKE '%dried%'
	ORDER BY p.ProductName
/*The advertising coordinator could not remember how the product's name was spelled,
so the percentage sign renders results with the sequence within the percentage signs .*/

/*Write a query that reveals how many product are within a package .*/
SELECT*FROM Product AS p
	WHERE p.Package 
	LIKE '%24%'
	ORDER BY p.ProductName

/*The Supplier table contains 22 packages that have %24'% products within them.*/

/*Let us try using the LIKE Operator with Underscore (_).  The underscore can only
represent one character, which helps if there is only one letter in a name that you are not 
sure of how to spell correctly.*/
SELECT*FROM Customer AS C
	WHERE C.LastName
	LIKE 'Peters_n'
	ORDER BY C.LastName

/*There is only one Petersen last name within this database.  No
Peterson!  See the usefulness of the LIKE Operator using an Underscore!*/

SELECT DISTINCT C.City
	FROM Customer AS C 

/*There are 64 citites from where customers are located. How many cities within
the USA are customers located, a question from the web developer team!*/
SELECT DISTINCT C.City
	FROM Customer AS C 
	WHERE C.Country = 'USA'
/*The answer is 19 different cities!*/

/*If we do not use distinct within the previous query...  .*/
SELECT C.City
	FROM Customer AS C 
	WHERE C.Country = 'USA'

/*The result-set is 41 rows.  This tells the web developer team
that more than one customer lives in some of the cities within the USA.
*/

/*SELECT DISTINCT and the IS NOT Operator and the SELECT DISTINCT Clause.*/
SELECT DISTINCT C.Country
	FROM Customer AS C
	JOIN CustomerOrder AS O
	ON C.CustId = O.CustomerId
		WHERE O.TotalAmount > 5000

/*Only the countries are listed. The DISTINCT only allows one row per country to be displayed. 
Without it, 38 rows are displayed.*/

/*IS NOT NULL Operator.  This table has alot of nulls, let us filter those out of the Fax column.*/
SELECT*FROM Supplier AS S
	WHERE S.Fax IS NOT NULL

/*Out of 29 rows, 13 rows are in the result-set.   16 of the suppliers do not have a fax number in
this database. The WHERE clause narrows down the result-set according to the condition.  One is required 
to know what they want to retrieve in order to filter the result-set with a query!  the IN and BETWEEN
operators retrieve a range from the database.  The LIKE operator is used for wildcards and NOT NULL 
gives a result-set where rows within a database are not empty.*/

SELECT*FROM Customer AS C
JOIN CustomerOrder AS O
	ON C.CustId = O.CustomerId
	WHERE C.Country = 'France'
		AND O.TotalAmount > 800
	ORDER BY C.LastName
/*The AND condition narrows down the result-set: 32 (>800 rows) to France (11 rows). This result 
indicates that any one person made many orders.*/

/*Which suppliers are from Frankenmuth (town) OR Germany.*/
SELECT*FROM Supplier 
	WHERE Country = 'Germany'
		OR City = 'Fran%'
/*Use an OR operator within a SQL query.*/
SELECT*FROM Product AS P
	WHERE NOT IsDiscontinued = 1

/*The result-set contains 70 rows.*/

SELECT*FROM Product AS P
WHERE NOT UnitPrice > 20	
/*The result-set contains 41 rows.  This displays products under 20 bucks.*/

/*Use an IN operator within a SQL query.  The Marketing Director wants to know the suppliers from 
the list of countries below and WHAT ITEMS have been also discontinued.*/
SELECT*FROM Supplier AS S
JOIN Product AS P 
ON S.SupplierId = P.SupplierId
	WHERE S.Country 
		IN (
		'Germany'
		,'Norway'
		,'Sweden'
		)
			AND P.IsDiscontinued = 1
	ORDER BY S.Country

/*The Plutzer L% Supplier's product ID's 28 and 29 (R% Sauerkraut and Thuringer Rost%) in Germany has been discontinued .*/

/*Let us use the BETWEEN Operator within another query, which displays
data within a specified range in a result-set.   The Sales Team wants to know which
suppliers in the United States have products within the price range of $10-$20
that are also made in the USA.*/
SELECT*FROM Supplier AS S
JOIN Product AS P
ON S.SupplierId = p.SupplierId
	WHERE S.Country = 'USA'
		AND p.UnitPrice 
			BETWEEN 10 
			AND 20
	ORDER BY p.UnitPrice

/*Nine suppliers meet these specifications.  All of the information from the supplier
table was listed as the team needs the contact information.*/


/*Using NOT NULL to filter data in a result-set .*/
SELECT*FROM
Customer AS C 
LEFT JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
WHERE O.CustomerId IS NOT NULL

/*This query gives only rows without the CustomerID being NULL from the CustomerOrder 
table. There are 830 rows returned from this query.*/

SELECT*FROM
Customer AS C 
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
WHERE O.CustomerId IS NOT NULL

/*This query also resulted in 830 rows.*/

SELECT*FROM
Customer AS C 
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
/*Deleting the WHERE clause renders 830 rows from this query.*/

SELECT*FROM
Customer AS C 
LEFT JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
/*Deleting the WHERE clause and using a LEFT JOIN again renders
832 rows from this query.*/

/* In summary, the LEFT JOIN is not NULL specific unless stated otherwise
using IS NOT NULL does not display any NULL rows since the JOIN just pulls
what iss matching from the tables. A big takeaway is that the LEFT JOIN will only retrieve
NULLS from table 1, or the left table.  JOIN cannot do this action.*/
SELECT*FROM Customer AS C
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
	WHERE C.Country = 'Austria'
	AND O.TotalAmount < 1000

SELECT*FROM Customer AS c
JOIN CustomerOrder AS O
ON C.CustId = O.CustomerId
	WHERE C.Country = 'Austria'
	AND O.TotalAmount 
	BETWEEN 1000 AND 3000

SELECT DISTINCT C.FirstName
FROM Customer AS C

/*Let us try some GROUP BY and aggregate functions!*/
SELECT s.CompanyName,
	FORMAT(AVG(p.UnitPrice),'C')'Average Unit Price'
FROM Product p
JOIN Supplier s
ON p.SupplierId = s.SupplierId
GROUP BY s.CompanyName


/*Our result-set is 29 rows.  Averages are displayed in the format of dollars with 
two decimal places for cents.  The average unit price for 'Toyko Traders' is $46.00.
Notice the lack of 'AS' when stating aliases like the previous query. An alias is a single
character.  The use of 'AS' is best to be used for beginners in their SQL journey. */

SELECT s.CompanyName,
FORMAT(AVG(p.UnitPrice),'C')'Average Unit Price'
		,COUNT(p.UnitPrice)'Total Items'
FROM Product p
JOIN Supplier s
ON p.SupplierId = s.SupplierId
GROUP BY s.CompanyName

/*We did not use SUM for UnitPrice since no sales insights could be used versus using the 
money generated.*/

select c.Country
	,COUNT(c.custID) 'Number of Customers'
	,SUM(o.TotalAmount) 'Total Amount'
	,AVG(o.TotalAmount) 'Average Amount'
FROM Customer c
JOIN CustomerOrder o
ON c.CustId = o.CustomerId
	GROUP BY c.Country
ORDER BY c.Country

/*COUNT functions sort through the table and counts
via the GROUP BY column value as it progresses through the
table.  The SUM function scans through the number type column
and adds a group total based upon the GROUP BY column. When the 
GROUP BY matches, the value of the SUM column is added to the 
running total of the SUM column.  The TotalAmount per customer
is added using the GROUP BY Country column.  Customers from Italy
get summed of the TotalAmount column.  The AVG funnction is
similar to the ADD function, and the only change is that it performs
an average calculation versus a sum of the specifications of the 
query.   Spanish customers' TotalAmount is now averaged.  One thing
to remember is that COUNT performs on all column datatypes.  Other
aggregate functions perform calculations on columns containg numeric type of 
data.  Calculation columns without an alias would render a "No Column Name".*/



/*FORMAT function only changes the display, not the formatted content, of data types
INTEGER, decimal and datetime.  This function needs two data pieces, or arguments and
the optional argument with square brackets [] can be left off (i.e. FORMAT(value,format[culture]).
Unless it is stated, the FORMAT function will show the user's default display.*/

/*FORMAT(SUM(o.TotalAmount), 'C', 'en-US') 'Total Amount'    This displays the $ with commas and 2
decimal places.*/

/*FORMAT(AVG(o.TotalAmount), 'N', 'en-US') 'Average Amount'      This displays commas and two
decimal places.  

Using 'en-GB' would use UNited Kingdom value of pounds.  This is an example of culture code.

These are two examples of FORMAT functions.*/


