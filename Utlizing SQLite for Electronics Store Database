/*After downloading this SQL database named BIT_DB (an acronymn for Break Into Tech Database) that was imported in "All Files" format from a Dropbox, let us check out 
what tables are within this database. This database is called Electronics Store Database and contains following tables called: 
AprSales
customers
FebSales
JanSales
MarSales
MaySales
This datbase contains a table called "customers" in addition to other table that may contain sales data by month. */

/* Utlize the SELECT command to display only 25 rows that are in the "customers" table in addition to displaying the names of all of the column names
within the "customers" table. Run QL in SQLite studio.*/
SELECT * FROM BIT_DB.customers LIMIT 25

/* A BETTER CODE!!!
Correcting inaccurate data. In the table "customers", sift out rows with the data consisting of "Order ID" versus just a number that is
completely listed out and not displayed after a query as "...". The command below reads as returning orders where 
only six characters comprise the cell in the column called order_id of each order in the “customers” table.
The length fuction is an SQL function that counts a string's characters. "< >" is the SQL version of the operator "does not equal to". 
The command below with the length command filters out cells not containing the data characters of 'Order ID'.
*/

SELECT * FROM BIT_DB.customers
WHERE length (order_id)=6
AND order_id <> 'Order ID'; 


/*Another way to fill out jumbled code is in the query below. This command filter does not display a table's cells that are empty with 
the placeholder string displayed as "NULL".  */
SELECT * FROM BIT_DB.customers
WHERE order_id <> IS NOT NULL
AND order_id <> ''; 

/*DOUBLE CLICKING on the column names with the display of "..." tells the user that there are more values than are currently displayed. This could be an issue if the 
company using this database is bought by another company that would not sort their client database in the same command style.. By double clicking the column name
order_id again, the column values changes all of the data to "Order ID". Use a command that will filter out unorganized data.*/
SELECT * FROM BIT_DB.customers;

/*The column names in the "customers" table are "order_id" and "acctnum" or account number. */

/* The account numbers are 8 digits long. This is a very large table within an even larger database! 
Write another query counting the total account numbers within this "customers" database. */
SELECT COUNT (*) FROM BIT_DB.customers;

/*There are 21,759 customers within this table with the idenfication of "acctnum".*/


/*Now let us explore the other tables within the database!*/
SELECT * FROM BIT_DB.JanSales LIMIT 25;

/*The JanSales table contains the columns orderID, Product, Quantity, price, orderdate, and location.*/

/*Hmmm, the orderID numerically have six digits. Let us be get more specific with this table. 
Plus, answer the your sales manager's question emailed a few moments ago inquiring the 
number of sales to be had in January. Write a command that counts the total orders in the "JanSales" table. */

/* But first, let us address how to correct inaccurate data. In the table "JanSales", sift out rows with 
the data consisting of "Order ID" versus just a number that is completely listed out and not displayed after a query as "...". 
The command below reads as returning orders where only six characters comprise the cell in the column called 
orderID of each order in the “JanSales” table. The length fuction is an SQL function that counts a string's characters. 
"< >" is the SQL version of the operator "does not equal to". The command below with the length command filters out 
cells not containing the data characters of 'Order ID'.*/
SELECT COUNT (orderID) FROM BIT_DB.JanSales
WHERE length (orderID)=6
AND orderID <> 'Order ID'; 

/*There are a total of 9,681 orders within the "JanSales" table.*/

/*What product in the month of January was sold at the lowest price?*/
SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE price 
    IN( SELECT min(price) FROM BIT_DB.JanSales)
/*So AAA batteries were the cheapest item ordered in January. But a better code would 
account for a possible second item at the same price sold in January!!!*/

/*Below are three options of Standard SQL code that render the same results. Variety is the 
spice of life when correct!*/

SELECT distinct Product, price
FROM BIT_DB.JanSales
ORDER BY price ASC LIMIT 1;

SELECT distinct 
Product, MIN (price)
FROM BIT_DB.JanSales Jan
GROUP BY Product, price
ORDER BY price ASC LIMIT 1;

/*Most Relational Database Management Systems do not allow
 for aggregrate and non-aggregate  functions without 
 GROUP BY commands.  The reasoning behind this is that 
 the system does not know if the user wants the mininum
 price of all products or per each product.  Even though the 
 same results are rendered in SQLite without the GROUP BY 
 clause, for continuity's sake, the GROUP BY command is 
 shown in the commands. In addition, the lowest price per item
 is listed even if each item was sold at multiple prices; therefore,
 it is not the only price per given product.
 The code is included below.  */
 
SELECT distinct product, min(price)
FROM BIT_DB.JanSales
GROUP BY product;


/*This GROUP BY clause tells the Relational Database Management system that we 
the minimum price for all products in the "JanSales" table. Without it, the command
would only pull the each's products minimum price. Not using the GROUP BY in other RDMS's 
would cause an error (SQLite understands both and displays the same answer.*/



/* How much revenue was created in the January according to the "JanSales" table?
We don't want just the total sales, but sales for each product sold in the 
month of January.*/

SELECT sum(quantity) * price
AS revenue_accumulated,
Product
FROM BIT_DB.JanSales
GROUP BY product;

/*Analyze  "(quantity)*price" .*/
SELECT orderID
, quantity 
, price
,product
FROM BIT_DB.JanSales;

/*Notice that the quantity of each item is sometimes greater than one.  This is 
because there are duplicates since different orders consisted of the same 
product.   Let us clean this up a bit! */
SELECT SUM (quantity)
, price
, product
FROM BIT_DB.JanSales
GROUP BY product, price;

/*Let us make this more specific!  The sales manager wants to know the revenue per 
product, which is calculated by multiplying a product's price times the quantity 
that the item was purchased.*/


SELECT SUM (quantity) * price AS revenue_accumulated
, Product
FROM BIT_DB.JanSales
GROUP BY product;


/*But, to clarify, here are the total sales from the month of January from
the "JanSales" table.*/

SELECT SUM (price) 
AS total_JanSales
FROM BIT_DB.JanSales;

/*January sales totalled to $1,805,013.66 !*/

/*Now, the sales manager's interest is piqued. Display the sales of each item
sold in February in addition to total sales from 
each item in the February month in this database.*/

SELECT sum(quantity) * price
AS revenue_accumulated,
Product
FROM BIT_DB.FebSales
GROUP BY product;

/*But, to clarify, here are the total sales from the month of February from
the "FebSales" table.*/


SELECT SUM (price) 
AS total_FebSales
FROM BIT_DB.FebSales;


/* Total sales for the month of February are $2,190,339.70.*/


/*From items purchased in February, which were purchased at "548 Lincoln St, Seattle, 
Washington 98101, the quantity purchased, in addition to the total sale .*/ 


SELECT
product, 
SUM (Quantity) AS Address_FebPurchased, 
price AS item_monthrevenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
AND length (orderID)=6
AND orderID <> 'Order ID'
GROUP BY product;

/*From items purchased in February, which were purchased at "548 Lincoln St, Seattle, 
Washington 98101", the quantity purchased, in addition to the total sale . This is the
address of a corporate CEO, and the marketing team wants to see how much the 
corporate office purchases this company's product and other purchase details.*/ 


SELECT
product, 
SUM (Quantity) AS Address_FebPurchased, 
price AS item_monthrevenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
AND length (orderID)=6
AND orderID <> 'Order ID'
GROUP BY product;

/*The CEO purchases only the essentials from this company - AA batteries!*/

/*iPhone conundrum-----------------------------------------------------------------------*/

/*How many of the orders within the sales from January were only for an iPhone?.*/
SELECT COUNT (orderID) 
FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
AND length (orderID)= 6
AND orderID <> 'Order ID'; 

/*So, in January, 379 iPhones were ordered. What about February, March, April, and May for the 
number of iPhones ordered.*/

SELECT COUNT (orderID) 
FROM BIT_DB.FebSales
WHERE Product = 'iPhone'
AND length (orderID)= 6
AND orderID <> 'Order ID'; 
/*439 iPhones were ordered in February.*/


/*How many iPhones were sold in March?*/
SELECT COUNT (orderID) 
FROM BIT_DB.MarSales
WHERE Product = 'iPhone'
AND length (orderID)= 6
AND orderID <> 'Order ID'; 
/*537 iPhones were ordered in March.*/

/*How many iPhones were sold in April? .*/
SELECT COUNT (orderID) 
FROM BIT_DB.AprSales
WHERE Product = 'iPhone'
AND length (orderID)= 6
AND orderID <> 'Order ID'; 

/*693 iPhones were ordered in April. */


/*How many iPhones were sold in May.*/
SELECT COUNT (orderID) 
FROM BIT_DB.MaySales
WHERE Product = 'iPhone'
AND length (orderID)= 6
AND orderID <> 'Order ID'; 

/*639 iPhones were ordered in May.The month of April holds as the peak in 
sales for the iPhone purchases. Perhaps, people are preparing their summer
playlists!*/

/*Now, write a command that dislays the customer accounts numbers for all
purchases in February by joining the "FebSales" and "customers" tables with an INNER JOIN. */

SELECT distinct acctnum
FROM BIT_DB.customers c

INNER JOIN BIT_DB.FebSales Feb
ON c.order_id = Feb.orderID
WHERE length (orderID) = 6
AND orderID <> 'Order ID';

/*There are one thousand orderID's for the month of February alone! */

/*According to this company's database, only 379 iPhones were ordered in January out of the 9,681 orders throughout the whole
month of sales. Now, I am being a nosey data analyst. Write commands to show the column names of the "JanSales", "FebSales", 
"MarSales", "AprSales", "MaySales" tables so scrolling is minimized for this sales analysis.*/
SELECT *FROM BIT_DB.JanSales LIMIT 25;

SELECT *FROM BIT_DB.FebSales LIMIT 25;

SELECT *FROM BIT_DB.MarSales LIMIT 25;

SELECT *FROM BIT_DB.AprSales LIMIT 25;

SELECT *FROM BIT_DB.MaySales LIMIT 25;
/*The column names are pretty organized, being that they are the same for each month's table. Bravo to the data entry specialists! 
The columns for the "JanSales", "FebSales", "MarSales", "AprSales", "MaySales" tables are the following:
orderID, 
Product,
Quantity,
price, 
orderdate,
location
.*./


/*In the month of February, how many customers ordered greater than two products per order and display the 
average money spent per customer?*/

SELECT
COUNT (distinct cust.acctnum),
AVG (quantity*price) AS spentpercustomer
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID = cust.order_id
WHERE Feb.Quantity > 2
AND length (orderID) = 6
AND orderID <> 'Order ID';

/*Now, let us utilize some advanced data filtering techniques in order to analyze the order history in
 terms of dates of orders!*/
SELECT orderdate, Product, price
FROM BIT_DB.FebSales
WHERE orderdate 
    BETWEEN '02/13/19 00:00' 
    AND '02/18/19 00:00'
ORDER BY price DESC

/*This is right after Valentines'Day!  What a coincidence!  People purchased a lot of over $200 during this time 
purchasing high-end gifts for their significant others!*/


/* Some of the warehouse managers noticed an iPhone purchased from a similar address has been purchased on a recent 
order.  If it is the same address, our sales and marketing team needs to mail in a warranty notification so that 
the customer continues to buy from reputable company and tell their friends of the company's customer service! */
SELECT location, Product
FROM BIT_DB.FebSales
WHERE orderdate = '02/18/19 01:35'


SELECT orderdate
, Product
, location
FROM BIT_DB.JanSales
WHERE location = '866 Spruce St, Portland, ME 04101' 


SELECT orderdate
, Product
, location
FROM BIT_DB.MarSales
WHERE location = '866 Spruce St, Portland, ME 04101' 

/*Sounds like our training team needs to give training to the analyst team.  We are all human!*/

/*Write a command that displays the orderdate starting with 02/18/19 and anytime after that in the
format of (HH:MM).*/

SELECT SUM (quantity)
FROM BIT_DB.FebSales
WHERE orderdate like '02/18/19%'

/*There were 508 orders placed after 02/18/19 for the month of February Sales.*/

/*Now the company product manager cannot remember what kind of batteries were sold in 
February.  Find out that information for him!  .*/
SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product LIKE '%atteries%'

/*The sales manager wants to know what items sold in February were sold in dollars
ending in 99 cents versus a full dollar.  Find this out for her! */

SELECT distinct Product
, price
FROM BIT_DB.FebSales
WHERE price LIKE '%.99'


/*For the month of February sales for this company, list all of the products sold in 
in Los Angeles AND display how many of each item were purchased in February from
Los Angeles as well. */


SELECT Product
, SUM (quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product 

/*It appears that the most purchased February items in Los Angeles were triple A batteries! */

/*From the sales in the month of January, which New York locations acquired at least 3 orders.
Furthermore, how many orders did each New York location receive? Make sure to note how the 
states are listed in the address information (i.e. "NY" or "New York:.*/

SELECT distinct location
, COUNT (orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
    AND length (orderID) = 6
    AND orderID <> 'Order ID'
GROUP BY location
HAVING count (orderID) > 2

/*In the month of January, the most orders were placed and delivered to
"961 Jefferson St., New York City, NY 10001" with four orders alone this 
month.  Three other locations had 3 orders delivered.*/

/*Count the quantity of each headphone style ordered in the February sales
data.*/

SELECT sum(Quantity) as quantity,
Product
FROM BIT_DB.FebSales 
WHERE Product like '%Headphones%'
GROUP BY Product
ORDER BY quantity ASC

/* 844 Bose SoundSport, 1013 Apple Airpods, and 1282 Wired Headphones were sold.
Let us compare the prices with an extra command based off this analysis. */
SELECT sum(Quantity) as quantity,
Product,
price
FROM BIT_DB.FebSales 
WHERE Product like '%Headphones%'
GROUP BY Product
ORDER BY price ASC

/*Wired headphones are only $11.99 versus Bose SoundSport headphones being 
sold at $99.99 and Apple Airpods sold at $150.00.  It is a tight economy after all!
Interestingly, look below at the results...
1282	Wired Headphones	11.99
844	Bose SoundSport Headphones	99.99
1013	Apple Airpods Headphones	150        */

/* More Apple Airpods were bought in February despite being the most costly option
versus the cheaper Bose headphones option.  Apple Airpods are very popular! */

/*In the month of February, what was the average amount of money spent per account 
in February? (This is asking for the average money spent out of the total accounts. 
This query is not for the average amount money spent per account.)*/

SELECT SUM (quantity*price)/ COUNT (cust.acctnum) AS AverageFebOrder
FROM BIT_DB.FebSales FEB

LEFT JOIN BIT_DB.customers cust
ON FEB.orderID = cust.order_id

WHERE length (orderID) = 6
AND orderID <> 'Order ID' 

/* For the sales month of February, the average amount spent 
per user account was $190.00.*/

/*Another way to write the query above to answer the same question is below.*/
SELECT AVG (quantity*price) AS AverageFebOrder
FROM BIT_DB.FebSales FEB

LEFT JOIN BIT_DB.customers cust
ON FEB.orderID = cust.order_id

WHERE length (orderID) = 6
AND orderid <> 'Order ID'

/*For the month of January, what product contributed the most revenue, and 
how much in dollars and cents. */
SELECT product AS toprevenue_contributor
,SUM(quantity*price) AS topJanrevenue
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY SUM(quantity*price) DESC
LIMIT 1


/*Another way to write this command would be the following...*/


SELECT SUM(quantity) AS numberPurchased,
price,
SUM(quantity)*price as revenue,
SUM(quantity*price) as revenue2,
product 
FROM BIT_DB.JanSales
GROUP BY product 
/* The correct way to write this command typically is usually sum(quantity*price) because each product's price 
typically changes (think of daily deals). Revenue is the product of product price times the quantity sold for each
product. Sum(quantity)*price works for this database query since the price of each product never changed (a controlled variable).
If the daily cost of each product changed daily, or ever, sum(price) would not give the "real" revenue total, and thus
the incorrect answer.*/

/*The product that brought the most 
revenue was the Macbook Pro Laptop with revenue
of $399,500. What about the other months?*/
SELECT product AS toprevenue_contributor
,SUM(quantity*price) AS topFebrevenue
FROM BIT_DB.FebSales
GROUP BY product
ORDER BY SUM(quantity*price) DESC
LIMIT 1

/*The Macbook Pro Laptop was bought the most
in February and bringing in revenue of $467,500.*/
SELECT product AS toprevenue_contributor
,SUM(quantity*price) AS topMarRevenue
FROM BIT_DB.MarSales
GROUP BY product
ORDER BY SUM(quantity*price) DESC
LIMIT 1

/*The Macbook Pro Laptop was bought the most again
for March Sales and bringing in revenue of $646,000.   */

SELECT product AS toprevenue_contributor
,SUM(quantity*price) AS topAprRevenue
FROM BIT_DB.AprSales
GROUP BY product
ORDER BY SUM(quantity*price) DESC
LIMIT 1

/*The Macbook Pro Laptop was bought the most again
for April Sales and bringing in revenue of $773,500.
That is the most revenue so far! */

SELECT product AS toprevenue_contributor
,SUM(quantity*price) AS topMayRevenue
FROM BIT_DB.MaySales
GROUP BY product
ORDER BY SUM(quantity*price) DESC
LIMIT 1

/*The Macbook Pro Laptop was bought the most again
for May Sales and bringing in revenue of $787,100.
That is the most revenue out of all of the months
of sales for this database!  Someone needs to
contact the marketing team to find a trend! */

/* For all of the orders created in the month of February, write a command that lists the account numbers of
individuals that placed orders, a count of the order ID's, order date, quantity, product, price, and location.*/

SELECT 
cust.acctnum
,count(cust.order_ID) as Orders
,Feb.orderdate
,Feb.Quantity
,Feb.Product
,Feb.price
,Feb.location
FROM BIT_DB.customers cust

INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=Feb.orderid

GROUP BY 
cust.acctnum
,Feb.orderdate
,Feb.Quantity
,Feb.Product
,Feb.price
,Feb.location
